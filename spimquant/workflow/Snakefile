from snakebids import bids, generate_inputs, get_wildcard_constraints, set_bids_spec
from snakemake.utils import format

set_bids_spec("v0_11_0")


configfile: "config/snakebids.yml"


# use expandvars so we can use e.g. '$SLURM_TMPDIR'
root = os.path.expandvars(config["root"])
work = os.path.expandvars(config["work"])


# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False),
    ignore=['sourcedata']
)

from lib.ome_zarr import get_channel_names

#get stains from first subject (lazy - should use the correct stain for each subject, when defining target rules)
stains = get_channel_names(inputs['spim'].expand()[0])

stain_for_reg=None
for stain in config['stains_for_reg']:
    if stain in stains:
        stain_for_reg = stain
        break

if stain_for_reg==None:
    print('ERROR: a stain for registration was not found in the first OME zarr file')
    

stains_for_blobdetect=list(set(config['stains_for_blobdetect']).intersection(set(stains)))
root = "results"


#container: config["containers"]["spimprep"]


# wildcard_constraints: **get_wildcard_constraints(config["pybids_inputs"])
wildcard_constraints:
    stain="[a-zA-Z0-9]+",


rule all_templatereg_deform_zooms:
    input:
        spim_zoomed=inputs["spim"].expand(
            bids(
                root=root,
                datatype="micr",
                desc="deform",
                space="{template}",
                stain="{stain}",
                res="{res}um",
                suffix="SPIM.nii",
                **inputs["spim"].wildcards
            ),
            template=config["template"],
            stain=stains,
            res=config["templatereg"]["zooms"],
        ),


rule all_blobdensity:
    input:
        blob_density=inputs["spim"].expand(
            bids(
                root=root,
                datatype="micr",
                space="{template}",
                stain="{stain}",
                suffix="blobdensity.nii",
                **inputs["spim"].wildcards
            ),
            stain=stains_for_blobdetect,
            template=config["template"],
        ),


rule all_blobs:
    input:
        spim_zoomed=inputs["spim"].expand(
            bids(
                root=root,
                datatype="micr",
                stain="{stain}",
                suffix="blobs.npy",
                **inputs["spim"].wildcards
            ),
            stain=stains_for_blobdetect,
        ),


rule all_templatereg_deform:
    input:
        spim=inputs["spim"].expand(
            bids(
                root=root,
                datatype="micr",
                desc="deform",
                space="{template}",
                stain="{stain}",
                suffix="SPIM.nii",
                **inputs["spim"].wildcards
            ),
            template=config["template"],
            stain=stains,
        ),


rule all_templatereg_lbl:
    input:
        dseg=inputs["spim"].expand(
            bids(
                root=root,
                datatype="micr",
                desc="resampled",
                from_="{template}",
                suffix="dseg.ome.zarr.zip",
                **inputs["spim"].wildcards
            ),
            template=config["template"],
        ),


rule all:
    default_target: True
    input:
        rules.all_templatereg_deform_zooms.input,
        rules.all_blobdensity.input


include: "rules/common.smk"
include: "rules/import.smk"
include: "rules/masking.smk"
include: "rules/templatereg.smk"
include: "rules/blobdetect.smk"
